services:
  # Backend
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - FRONTEND_URL=${FRONTEND_URL}
      - DATABASE_URL=${DATABASE_URL}
      - DIRECT_URL=${DIRECT_URL}
      # Firebase auth
      # Auth
      - FIREBASE_TYPE=${FIREBASE_TYPE}
      - FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - FIREBASE_PRIVATE_KEY_ID=${FIREBASE_PRIVATE_KEY_ID}
      - FIREBASE_PRIVATE_KEY=${FIREBASE_PRIVATE_KEY}
      - FIREBASE_CLIENT_EMAIL=${FIREBASE_CLIENT_EMAIL}
      - FIREBASE_CLIENT_ID=${FIREBASE_CLIENT_ID}
      - FIREBASE_AUTH_URI=${FIREBASE_AUTH_URI}
      - FIREBASE_TOKEN_URI=${FIREBASE_TOKEN_URI}
      - FIREBASE_AUTH_PROVIDER_CERT=${FIREBASE_AUTH_PROVIDER_CERT}
      - FIREBASE_CLIENT_CERT_URL=${FIREBASE_CLIENT_CERT_URL}
      - FIREBASE_UNIVERSE_DOMAIN=${FIREBASE_UNIVERSE_DOMAIN}
    env_file:
      - .env
    depends_on:
      database:
        condition: service_healthy

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
    environment:
      - VITE_BACKEND_URL=${VITE_BACKEND_URL}
    depends_on:
      - backend
    ports:
      - "5173:80"
    env_file:
      - .env

  # Database
  database:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "10001:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always
